// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  email     String       @unique
  password  String
  role      RoleEnumType @default(USER)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  photo     String?
  cart      Cart?
  orders    Order[]

  @@index([email])
}

model Cart {
  id        String            @id @default(uuid())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String            @unique
  products  ProductsOnCarts[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model ProductsOnCarts {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id             String             @id @default(uuid())
  name           String
  price          Float
  top            Boolean
  info           ProductInfo[]
  images         Image[]
  carts          ProductsOnCarts[]
  orders         ProductsOnOrders[]
  productTypeId  String
  productBrandId String
  productType    ProductType?       @relation(fields: [productTypeId], references: [id])
  productBrand   ProductBrand?      @relation(fields: [productBrandId], references: [id])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model ProductInfo {
  id          String   @id @default(uuid())
  title       String
  description String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductBrand {
  id        String       @id @default(uuid())
  name      String
  productId String
  products  Product[]
  types     TypeBrands[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model ProductType {
  id        String       @id @default(uuid())
  name      String
  productId String
  products  Product[]
  brands    TypeBrands[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model TypeBrands {
  id             String       @id @default(uuid())
  typeId         String
  productType    ProductType  @relation(fields: [typeId], references: [id])
  brandId        String
  productBrandId ProductBrand @relation(fields: [brandId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String             @unique
  products  ProductsOnOrders[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model ProductsOnOrders {
  id        String   @id @default(uuid())
  quantity  Int
  phone     String
  username  String
  province  String
  region    String
  address   String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RoleEnumType {
  USER
  ADMIN
}
